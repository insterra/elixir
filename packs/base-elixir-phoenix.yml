name: base-elixir-phoenix
type: template
description: Elixir / Phoenix build pack configuration.
frameworks: [phoenix, elixir]
visibility: public
dependencies: [
  {type: build, main: true, package_name: elixir},
  {type: build, package_name: npm},
  {type: runtime, package_name: bash},
  {type: runtime, package_name: curl},
  {type: runtime, package_name: s6},
  {type: runtime, package_name: jq},
  {type: runtime, package_name: ca-certificates}
]
sections:
- name: dependencies
  description: Enable dependency tracing
  attributes: 
    trace: true
- name: build
  description: |
    Build configuration for phoenix app. 

    If you are using npm with your phoenix deployment uncomment the `npm` line.

    If you are deploying a standard elixir app without phoenix comment the `mix assets.deploy` line.
  attributes:
    destination: [
      "_build/prod/rel/{{name}}/*"
    ]
    command: |
      export MIX_ENV=prod

      mix local.hex --force
      mix local.rebar --force
      mix do deps.get --only prod

      # npm --prefix ./assets install ./assets

      # Comment out mix assets.deploy for non phoenix apps
      mix assets.deploy

      mix release
- name: run
  description: |
    This section tells the builder how to run this applications. The `commands` will be exposed to you the user in the container.

    You can call the commands by typing `rc-service example-app [command]`. 

    - `rc-service example-app migrate`
    - `rc-service example-app console`
    - `rc-service example-app logs`

    This section assumes you have a module ExampleApp.Release.Tasks setup that runs your migrations.
  attributes:
    name: "{{name}}"
    commands: [
      { name: migrate, binary: "{{name}}", call: "eval '{{camelcase_name}}.Release.Tasks.migrate'"},
      { name: console, binary: "{{name}}", call: remote},
      { name: logs, binary: tail, path: "/usr/bin", call: "-f -n 100 /var/log/{{name}}/current"}
    ]
    services: [
      { name: web, binary: "{{name}}", start: {call: "start"} }
    ]
- name: hook
  description: |
    Hooks are commands that run at different stage of the package lifecycle.

    We will add the app to the rc-update so that it will start on boot.
  attributes:
    pre-upgrade: |
      rc-service {{name}} stop
    post-install: |
      rc-update add {{name}}
      rc-service {{name}} migrate
    post-upgrade: |
      rc-service {{name}} migrate
      rc-service {{name}} start
    post-deinstall: |
      rc-service {{name}} stop
      rc-update del {{name}}
- name: kit
  description: |
    Web service kit will enable service on port 4000 and provision the database automatically for your application.

    The `generic/secret` driver will automatically generate secret with the length `128` character to be used as your `SECRET_KEY_BASE`

    If you wish to use clustering we provide a libcluster strategy simple add it to your dependencies

    ```elixir
    def deps do
      [
        {:libcluster, "~> 3.0"},
        {:libcluster_uplink, "~> 0.2.0"}
      ]
    end
    ```

    Then add the following to your config

    ```elixir
    config :libcluster,
      topologies: [
        example: [
          strategy: Cluster.Strategy.Uplink,
          config: [
            app_name: "example-app"
          ]
        ]
      ]
    ```
  attributes:
    name: "web"
    description: "Web service"
    main: true
    ports: [
      { name: "web", target: 4000, main: true }
    ]
    variables: [
      { key: "PHX_SERVER", default_value: "true" },
      { key: "SECRET_KEY_BASE", driver: "generic/secret", driver_options: { length: 128 } }
    ]


